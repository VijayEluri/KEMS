package Proxy;

import java.util.ArrayList;
import java.util.List;

//interface
interface IPessoa {
  public String getNome();
  public String getId();
}

//objeto real
class PessoaReal implements IPessoa{
	private String _nome, _id;
	public String getId() {	return this._id; }
	public String getNome() {	return this._nome;	}
	
	public PessoaReal(String id, String nome){
		this._id = id;
		this._nome = nome;
		System.out.println("Obj real - " + this._id + " - " + this._nome);
	}
}

//simula uma consulta ao BD
class ConsultaBancoDados{
	public static IPessoa getPessoaByID(String id){
		return new PessoaReal(id,"Pessoa " + id);
	}
}

class ProxyPessoa implements IPessoa{
	private String _id;
	private IPessoa _iPessoa;
	
	public String getId() {	return this._id; }
	public String getNome() {	
		if (_iPessoa.equals(null)){
			_iPessoa = ConsultaBancoDados.getPessoaByID(this._id);
		}
		return _iPessoa.getNome();
	}
	
	public ProxyPessoa(String nome){ this._id = nome; }
	
}

public class ExemploProxy {
	public void testeProxy(){
		List<IPessoa> pessoas = new ArrayList<IPessoa>();

		//Cria cada Proxy para encapsular o acesso a classe "PessoaImpl"
    pessoas.add(new ProxyPessoa("A"));
    pessoas.add(new ProxyPessoa("B"));
    pessoas.add(new ProxyPessoa("C"));

    System.out.println("Nome: " + pessoas.get(0).getNome()); // busca do banco de dados
    System.out.println("Nome: " + pessoas.get(1).getNome()); // busca do banco de dados
    System.out.println("Nome: " + pessoas.get(0).getNome()); // já buscou esta pessoa... apenas retorna do cache...

    // A terceira pessoa nunca será consultada no banco de dados (melhor performance - lazy loading)
    System.out.println("Id da 3ª - " + pessoas.get(2).getId());//pode imprimir o ID do objeto, e o proxy nao será inicializado.
	}
}