
April 5th 2006
Geração de um analyser a partir de outro
Descrição geral e exemplo da criação de satlib-lfi-inconsdef a partir de satlib-lfi

1. Criar diretório com o nome do analyser em $MSTP_HOME/original/analysers/input
   Criei satlib-lfi-inconsdef

2. Copiar arquivos que estavam no diretório do analyser base para o novo diretório
   Copiei de satlib-lfi para satlib-lfi-inconsdef
   
3. Modificar os arquivos
   3.1 Modificar o arquivo .flex
      3.1.1. Mudar o nome do pacote
              	Mudei o nome do pacote para satlfiinconsdef - só no início
      3.1.2  Mudar o nome da classe do Lexer
              	Mudei o nome da classe do lexer para satlfiinconsdefLexer - várias ocorrências
      3.1.3  Mudar o nome da classe dos símbolos
 		Mudei o nome da classe dos símbolos para satlfiinconsdefsym  - várias ocorrências
      3.1.4  Acrescentar. excluir ou modificar símbolos
                Acrescentei 
		  Inconsistency = "#"
      3.1.5  Acrescentar, excluir ou modificar regras
      		Acrescentei 
		    {Inconsistency}      { return symbol(satlfiinconsdefsym.INCONSISTENCY); }
		    

   3.2 Modificar o arquivo .cup
      3.2.1 Modificar o nome do pacote
             	igual
      3.2.2  Mudar o nome da classe do Lexer
              	Mudei o nome da classe do lexer para satlfiinconsdefLexer - várias ocorrências
      3.2.3  Mudar o nome da classe dos símbolos
 		Mudei o nome da classe dos símbolos para satlfiinconsdefsym  - várias ocorrências
      3.2.4  Acrescentar, excluir ou modificar novos símbolos
   		Acrescentei INCONSISTENCY à seguinte linha:
   terminal           NEG, AND, OR, XOR, BIIMPLIES, IMPLIES, LPAREN, RPAREN, EOL, TOP, BOTTOM, CONSISTENCY, INCONSISTENCY;
   
      3.2.5  Acrescentar, excluir ou modificar regras
        Acrescentei em formula:
              INCONSISTENCY LPAREN formula:f RPAREN
                 {:
                 	RESULT = ff.createCompositeFormula(MBCConnectives.NOT, ff.createCompositeFormula(MBCConnectives.CONSISTENCY,
                 						  f ));
                 :}
           |
	Acrescentei em term:
	   		  |
		INCONSISTENCY STRING:n
                 {:
                 	RESULT = ff.createCompositeFormula(MBCConnectives.NOT, ff.createCompositeFormula(MBCConnectives.CONSISTENCY,
                 						  ff.createAtomicFormula(n) ));
                  :}

   3.3 Modificar conversor-wagner-SATLIB
   
     3.3.1 conversor-wagner-SATLIB.flex
     
     	Acrescentei esta linha para novo símbolo

   
       "*"                { //System.out.print("!");
                         return symbol(ConversorWagnerSATLIBsym.INCONSISTENCY); }
		
     3.3.2 conversor-wagner-SATLIB.cup	 
			 
     	Modifiquei 
	de:

			 terminal           SIGN, EOL, NEG, AND, OR, XOR, IMPLIES, BIIMPLIES, LPAREN, RPAREN, TRUE, FALSE, CONSISTENCY;
	para:
			 terminal           SIGN, EOL, NEG, AND, OR, XOR, IMPLIES, BIIMPLIES, LPAREN, RPAREN, TRUE, FALSE, CONSISTENCY, INCONSISTENCY;

	Acrescentei:
	         INCONSISTENCY term:t
                 {: RESULT = "#(" + t + ")";:}
        	 |


4. Incorporar ao sistema

  4.1 Compilar os dois pares lexer/parser com a versão do Java usada pelo provador
  4.2 Acrescentar o analyser ao Java Build Path do projeto
   4.2.1 Usar "Add Variable" TP_LIB_GENERATED "Extend" <nome do analyser>.jar
         Acrescentei satlibinconsdef.jar
  4.3 Acrescentar em ProverConfigurator.java o novo analyser
  
  	Acrescentei:
       		private static final String SATLFIINCONSDEF_PARSER = "satlfiinconsdef";
       
	E modifiquei
       	de:
        parsingLibNameCombo = new JComboBox(new String[] { SATS5_PARSER, SATLFI_PARSER });]
	
	para:
        parsingLibNameCombo = new JComboBox(new String[] { SATS5_PARSER, SATLFI_PARSER, SATLFIINCONSDEF_PARSER });

5. Copiar novos jars para $MSTP_EXPORT/lib/generated
    Copiei cw.jar e satlfiinconsdef.jar para ~/MSTPExport/lib/generated