/*
Adolfo Gustavo Serra Seca Neto, November 2003


Converts Wagner Dias's format formulas into SATLIB
format with signs and implication.

java java_cup.Main -parser ConversorWagnerSATLIBParser 
	-symbols ConversorWagnerSATLIBsym conversor-wagner-SATLIB.cup 
  	
generates ConversorWagnerSATLIBParser.java and ConversorWagnerSATLIBsym.java

06-08-2005: Added consistency


*/
package ConversorWagnerSATLIB;
import java.util.*;
import java_cup.runtime.*;
import java.text.ParseException;

parser code {:

    public void report_error(String message, Object info){

        StringBuffer m = new StringBuffer("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);

//      System.err.println(m);
	throw new Error (m.toString());
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        //System.exit(1);
    }
:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal           SIGN, EOL, NEG, AND, OR, XOR, IMPLIES, BIIMPLIES, LPAREN, RPAREN, TRUE, FALSE, CONSISTENCY, INCONSISTENCY;
terminal String   ID;

non terminal   end;
non terminal String    formula_list, formula_part;
non terminal String    expr, term, andExpr, orExpr, xorExpr;


/* -------------Precedence and Associatively of Terminals Section----------- */

precedence right IMPLIES, BIIMPLIES;
precedence left  OR;
precedence left  AND;
precedence left  XOR;
precedence left  NEG, CONSISTENCY, INCONSISTENCY;

   formula_list ::= formula_list:l formula_part:f
   				{: RESULT = l + "\n" + f; :}
                 |
                 formula_part:f
                 {: RESULT = f; :}
                 ;
   
   
   formula_part ::= SIGN:s expr:e end
                 {: RESULT = s + " " + e;:}
                 ;
                 
   end ::= EOL | ;                 	
                 
   
   expr      ::=
           term:t1 AND term:t2
                 {: RESULT = "*(" + t1 +  " " +  t2 + ")";:}
           |
           term:t1 AND term:t2 AND andExpr:ae
                 {: RESULT = "*(" + t1 +  " " +  t2 + " " + ae;  :}
           |
           term:t1 OR term:t2
                 {: RESULT = "+(" + t1 +  " " +  t2 + ")";:}
           |
           term:t1 OR term:t2 OR orExpr:oe
                 {: RESULT = "+(" + t1 +  " " +  t2 + " " + oe;  :}
           |
           term:t1 XOR term:t2
                 {: RESULT = "%(" + t1 +  " " +  t2 + ")";:}
           |
           term:t1 XOR term:t2 XOR xorExpr:xoe
                 {: RESULT = "%(" + t1 +  " " +  t2 + " " + xoe;  :}
           |
           expr:e1 IMPLIES expr:e2
                 {: RESULT = "->(" + e1 +  " " +  e2 + ")";:}
           |
           expr:e1 BIIMPLIES term:e2
                 {: RESULT = "<=>(" + e1 +  " " +  e2 + ")";:}
           |
           term:t
                 {: RESULT = t; :}

           ;

  andExpr ::=
  		  term: t
                 {: RESULT = t + ")"; :}
  		  |
  		  term:t AND andExpr:ae
                 {: RESULT = t + " " + ae; :}
          ;

  orExpr ::=
  		  term: t
                 {: RESULT = t + ")"; :}
  		  |
  		  term:t OR orExpr:oe
                 {: RESULT = t + " " + oe; :}
          ;

  xorExpr ::=
  		  term: t
                 {: RESULT = t + ")"; :}
  		  |
  		  term:t XOR xorExpr:xoe
                 {: RESULT = t + " " + xoe; :}
          ;

   term      ::= LPAREN expr:e RPAREN
                 {: RESULT = e; :}
                 |
                 TRUE
                 {: RESULT = "*()"; :}
                 |
                 FALSE
                 {: RESULT = "+()"; :}
                 |
	         NEG term:t
                 {: RESULT = "-(" + t + ")";:}
                 |
	         CONSISTENCY term:t
                 {: RESULT = "@(" + t + ")";:}
        	 |
	         INCONSISTENCY term:t
                 {: RESULT = "#(" + t + ")";:}
        	 |
                 ID:i
                 {: RESULT = i; :}
                 ;
